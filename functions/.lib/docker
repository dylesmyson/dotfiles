#!/usr/bin/env bash



##
# Build a docker container from the Dockerfile in current working directory.
#
# Defaults to tagging the container with the current working directory.
# Optionally, a tag may be supplied as the first positional argument.
__docker_build_container() {
  command docker build --tag "${1:-$(basename $(pwd)):latest}" "$PWD"
}

##
# Prune all docker-related objects older than a given duration.
#
# Defaults to 14 days (336 hours). All durations must be
# parseable by Go. See https://golang.org/pkg/time/#ParseDuration
__docker_prune_expired_objects() {
  command docker system prune --all --filter "until=${1:-336h}"
}

##
# Pause active containers.
__docker_pause_containers() {
  command docker pause "$(command docker ps --quiet)"
}

##
# Unpause active containers.
__docker_unpause_containers() {
  command docker unpause "$(command docker ps --quiet)"
}

##
# Remove active containers.
__docker_remove_active_containers() {
  command docker rm --volumes "$(command docker ps --quiet)"
}

##
# Remove ALL containers.
#
# You probably DO NOT want to use this!
__docker_remove_all_containers() {
  command docker rm --volumes "$(command docker ps --all --quiet)"
}

##
# Remove tagged images.
#
# Defaults to images tagged with the current working directory,
# unless a positional argument tag is given. If no images are
# found, it does nothing.
__docker_remove_tagged_images() {
  MATCHES=$(command docker images --quiet "${1:-$(basename $(pwd))}")
  [ -n "$MATCHES" ] && command docker rmi "$MATCHES"
}

##
# Remove ALL images.
#
# You probably DO NOT want to use this!
__docker_remove_all_images() {
  command docker rmi "$(command docker images --all --quiet)"
}

##
# Launch a view with periodically refreshing data about running containers.
#
# See https://docs.docker.com/engine/reference/commandline/ps/#filtering
# for more filtering options.
__docker_monitor_active_containers() {
  HEADERS=( "{{.ID}}" \
            "{{.Image}}" \
            "{{.Command}}" \
            "{{.Networks}}" \
            "{{.Ports}}" \
            "{{.Status}}" )

  # Bash magic: roughly equivalent to `$HEADERS.join('\t')`.
  FORMAT_STR="table $(local IFS=$'\t'; echo "$HEADERS")"

  while true; clear; do command docker ps --format "$FORMAT_STR"; sleep 5; done
}

##
# Launch a local docker registry container.
__docker_launch_registry_container() {
  command docker run --detach \
                     --name registry \
                     --restart always \
                     --publish 5000:5000 \
                     registry:2
}

##
# Launch a local Jenkins container.
#
# By default Jenkins expects to have access to code in $HOME/Docuements.
# If this is not the case, you can pass in a directory which contains the code
# to be built as a positional argument to this function.
__docker_launch_jenkins_container() {
  command docker run --rm \
                     --detach \
                     --user root \
                     --publish 8080:8080 \
                     --publish 50000:50000 \
                     --volume "${1:-$HOME/Documents}":/var/jenkins_home/code \
                     --volume jenkins-data:/var/jenkins_home \
                     --volume /var/run/docker.sock:/var/run/docker.sock \
                     jenkinsci/blueocean
}

