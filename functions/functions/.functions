#!/usr/bin/env bash

# capture and display output simulataneously
__capture() {
  tee captured.log
}

# loading an already-loaded key does nothing
__load_key() {
  ssh-add "$HOME/.ssh/id_rsa" > /dev/null 2>&1
}

# dynamically update desktop settings based on display count and holiday season
__update_desktop() {
  CURRENT_DESKTOP_LOC="$HOME/Library/Application Support/Dock/desktoppicture.db"
  MOBILE="$HOME/.desktops/mobile.db"

  if [ $(__count_displays) -eq 1 ]; then
    [ $(readlink "$CURRENT_DESKTOP_LOC" -s) == "$MOBILE" ] || __deploy_desktop "$MOBILE"
  else
    true
    # __deploy_desktop __cheer
  fi
}

# get current "cheer"
__cheer() {
  CHEER="$HOME/.desktops/default.db"
  ruby $HOME/Documents/cheer/cheer.rb | while read -r line; do
    cheer_db=$(echo "$cheer.db" | tr ' ' '_' | tr -d "'" | tr "[:upper:]" "[:lower:]")
    [ -f "$HOME/.desktops/$cheer_db" ] && CHEER="$HOME/.desktops/$cheer_db"
  done
  echo $CHEER
}

# clean desktop db dir interactively
__new_desktop() {
  rm -i "$HOME/Library/Application Support/Dock/desktoppicture.db"
}

# save a desktop
__save_desktop() {
  mv "$HOME/Library/Application Support/Dock/desktoppicture.db" "$1"
}

# deploy desktoppicture.db
__deploy_desktop() {
  ln -sf "$1" "$HOME/Library/Application Support/Dock/desktoppicture.db"
  killall -TERM Dock
}

# toggle spotlight
__spotlight() {
  sudo mdutil -a -i off
}

# edit a remote file locally with vim
rvim () {
  [ "$#" -eq 0 ] && echo "usage: rvim REMOTE [FILE PATH]" && return

  vim scp://"$1"/"$2"
}
